services:
  nginx:
    image: christba/7d-nginx:latest
    ports:
      - "3005:80"
      - "3443:443"  # For future HTTPS support
    volumes:
      - ./ssl:/etc/nginx/ssl:ro  # For future SSL certificates
    depends_on:
      - api
      - compass
      - minio
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  api:
    image: christba/7d-backend:latest
    expose:
      - "3000"  
    volumes:
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=miniosecretkey
      - MINIO_PUBLIC_HOST=christba.com
      - GOOGLE_CLOUD_PROJECT=burguer-menu-fbb80
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: christba/7d-postgres:latest
    expose:
      - "5432"  
    volumes:
      - kc_pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - app-network
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    expose:
      - "9000"  
      - "9001"  
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=miniosecretkey
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - app-network
    restart: unless-stopped

  compass:
    image: christba/7d-compass:latest
    expose:
      - "3005"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3005"]
      interval: 30s
      timeout: 10s
      retries: 3

  osrm:
    image: christba/7d-osrm:latest
    volumes:
      - osrm-data:/data
    expose:
      - "5000"
    ports:
      - "5000:5000"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "timeout 10 bash -c 'cat < /dev/null > /dev/tcp/127.0.0.1/5000'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  vroom:
    image: ghcr.io/vroom-project/vroom-docker:v1.14.0
    platform: linux/amd64
    environment:
      - VROOM_ROUTER=osrm
      - VROOM_LOG_LEVEL=debug
      - NODE_ENV=development
    depends_on:
      osrm:
        condition: service_healthy
    tmpfs:
      - /conf
    # Use entrypoint to create config from embedded content
    entrypoint: >
      sh -c "
      cat > /conf/config.yml << 'EOF'
      cliArgs:
        geometry: false
        planmode: false
        threads: 4
        explore: 5
        limit: '1mb'
        logdir: '/..'
        logsize: '100M'
        maxlocations: 1000
        maxvehicles: 200
        override: true
        path: ''
        port: 3000
        router: 'osrm'
        timeout: 300000
        baseurl: '/'
      routingServers:
        osrm:
          car:
            host: 'osrm'
            port: '5000'
          bike:
            host: 'osrm'
            port: '5001'
          foot:
            host: 'osrm'
            port: '5002'
      EOF
      exec /usr/local/bin/docker-entrypoint.sh
      "
    expose:
      - "3000"
    ports:
      - "3000:3000"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s


    
networks:
  app-network:
    driver: bridge

volumes:
  kc_pgdata:
  minio-data:
  osrm-data: